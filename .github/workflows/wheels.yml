name: build-triton-cp38-aarch64
on:
  workflow_dispatch:
    inputs:
      triton_ref:
        description: "Triton tag/branch/commit"
        required: false
        default: "v2.1.0"
      jobs:
        description: Number of parallel cores
        required: false
        default: "96"

jobs:
  wheel:
    runs-on: self-hosted
    timeout-minutes: 600

    steps:
      - uses: actions/checkout@v4
        with:
          repository: dienhartd/triton
          fetch-depth: 0

      - name: Select ref
        run: |
          set -eux
          REF="${{ inputs.triton_ref }}"
          git fetch --all --tags --force
          if git rev-parse "refs/tags/$REF" >/dev/null 2>&1; then
            git -c advice.detachedHead=false checkout "refs/tags/$REF"
          elif git rev-parse "origin/$REF" >/dev/null 2>&1; then
            git checkout "origin/$REF"
          else
            git checkout "$REF"
          fi
          git submodule update --init --recursive
          git rev-parse --short HEAD

      - uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ runner.os }}-${{ github.sha }}
          restore-keys: ccache-${{ runner.os }}-

      - name: (Optional) Prune old Docker stuff
        run: |
          sudo docker system prune -af --volumes || true

      - name: Build cp38 wheel in CUDA-manylinux (aarch64)
        run: |
          ( while true; do echo "::notice::build still running $(date -u)"; sleep 60; done ) & HB=$!
          docker run --rm \
            -e JOBS='${{ inputs.jobs }}' \
            -e PIP_NO_CACHE_DIR=1 \
            -e TRITON_DISABLE_PTXAS_DOWNLOAD=1 \
            -e TRITON_PTXAS_PATH=/usr/local/cuda/bin/ptxas \
            -v "$PWD":/io -w /io/python \
            sameli/manylinux_2_28_aarch64_cuda_12.3 bash -lc '
              set -eux
              PYBIN=/opt/python/cp38-cp38/bin

              # Toolchain
              $PYBIN/pip install -U pip setuptools wheel cmake ninja auditwheel

              # --- GUARANTEES / DEBUG ---
              # 1) Prove we are using the edited python/setup.py:
              grep -n "download_and_copy_ptxas" setup.py || echo "OK: no download_and_copy_ptxas in python/setup.py"
              # 2) Remove any stale vendored x86 ptxas from earlier runs:
              rm -rf triton/third_party/cuda
              # 3) Recreate path with a symlink to container ARM ptxas:
              mkdir -p triton/third_party/cuda/bin
              ln -sf /usr/local/cuda/bin/ptxas triton/third_party/cuda/bin/ptxas
              # 4) Assert arch is aarch64:
              file /usr/local/cuda/bin/ptxas
              file triton/third_party/cuda/bin/ptxas
              uname -m
              ptxas --version

              # Clear any stale x86 LLVM cache
              rm -rf /root/.triton/llvm || true

              # --- Provide ARM LLVM 17 & make Triton use it (skip x86 download) ---
              mkdir -p /root/.triton/llvm-aarch64 && cd /root/.triton/llvm-aarch64
              for URL in \
                https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/clang+llvm-17.0.6-aarch64-linux-gnu.tar.xz \
                https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.1/clang+llvm-17.0.1-aarch64-linux-gnu.tar.xz \
                https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.0/clang+llvm-17.0.0-aarch64-linux-gnu.tar.xz \
              ; do
                echo "Trying $URL"
                if curl -fsSL "$URL" -o llvm-aarch64.tar.xz; then
                  tar -xf llvm-aarch64.tar.xz && rm -f llvm-aarch64.tar.xz
                  break
                fi
              done
              LLVMDIR=$(echo /root/.triton/llvm-aarch64/clang+llvm-17.0.*-aarch64-linux-gnu)
              test -d "$LLVMDIR"
              test -x "$LLVMDIR/bin/mlir-tblgen"
              "$LLVMDIR/bin/mlir-tblgen" --version || true

              # Point Triton at this LLVM (this disables any download path)
              export LLVM_SYSPATH="$LLVMDIR"
              export PATH="$LLVMDIR/bin:$PATH"

              # Parallelism
              if [ -z "${JOBS:-}" ]; then J=$(nproc); else J="$JOBS"; fi
              LJ=$(( J/4 + 1 )); [ "$LJ" -lt 1 ] && LJ=1

              export CC=gcc CXX=g++ CFLAGS="-march=armv8-a" CXXFLAGS="-march=armv8-a"
              export TRITON_CMAKE_FLAGS="
                -DCMAKE_BUILD_TYPE=Release
                -DLLVM_ENABLE_ASSERTIONS=OFF
                -DLLVM_ENABLE_PROJECTS=mlir;llvm;lld
                -DLLVM_TARGETS_TO_BUILD=AArch64;NVPTX
                -DLLVM_INCLUDE_TESTS=OFF
                -DLLVM_INCLUDE_EXAMPLES=OFF
                -DLLVM_OPTIMIZED_TABLEGEN=ON
              "
              export CMAKE_BUILD_PARALLEL_LEVEL="$J"
              export LLVM_PARALLEL_COMPILE_JOBS="$J"
              export LLVM_PARALLEL_LINK_JOBS="$LJ"
              export NINJAFLAGS="-v -j$J -l$J"

              # Build & repair
              $PYBIN/pip wheel --no-deps -w /io/wheelhouse .
              auditwheel repair /io/wheelhouse/triton-*.whl -w /io/wheelhouse
              rm -f /io/wheelhouse/triton-*-linux_aarch64.whl || true
              ls -lh /io/wheelhouse/
            '
          kill $HB || true

      - uses: actions/upload-artifact@v4
        with:
          name: triton-aarch64-cp38
          path: wheelhouse/*.whl
          retention-days: 30
