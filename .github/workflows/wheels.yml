name: build-triton-cp38-aarch64
on:
  workflow_dispatch:
    inputs:
      jobs:
        description: Number of parallel cores
        required: false
        default: "96"

jobs:
  wheel:
    runs-on: self-hosted
    timeout-minutes: 600
    steps:
      - uses: actions/checkout@v4
        with:
          repository: triton-lang/triton
          fetch-depth: 0

      - name: Checkout tag v2.1.0
        run: |
          set -eux
          git fetch --tags --force
          git -c advice.detachedHead=false checkout "refs/tags/v2.1.0" || git checkout v2.1.0
          git submodule update --init --recursive
          git rev-parse --short HEAD

      - uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Install build deps (Ubuntu 20.04)
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build ccache \
            python3.8 python3.8-dev python3.8-venv python3-pip \
            git curl pkg-config

      - name: Build cp38 wheel on host (no manylinux)
        env:
          J: ${{ inputs.jobs }}
        run: |
          set -euxo pipefail
          # heartbeat so the job stays chatty
          ( while true; do echo "::notice::build still running $(date -u)"; sleep 60; done ) & HB=$!

          # parallelism (default to all cores)
          if [ -z "${J:-}" ]; then J=$(nproc); fi
          LJ=$(( J/4 + 1 )); [ "$LJ" -lt 1 ] && LJ=1

          # ensure defaults so set -u won't choke
          : "${GITHUB_WORKSPACE:=$PWD}"
          : "${HOME:=$GITHUB_WORKSPACE}"

          # Prefer native ARM64 ptxas (JetPack/CUDA installs it here)
          export PATH=/usr/local/cuda/bin:$PATH
          # Belt & suspenders: remove any vendored CUDA tools that might be wrong-arch
          rm -rf python/triton/third_party/cuda || true
          # Hard-fail if ptxas is missing so we don't hit an x86_64 'Exec format error'
          if ! command -v ptxas >/dev/null 2>&1; then
            echo "::error ::ptxas not found. Install CUDA toolkit on this runner (e.g. JetPack 5.x with CUDA 11.4) so /usr/local/cuda/bin/ptxas exists." >&2
            exit 1
          fi
          ptxas --version || true

          # isolate build tools from system Python
          python3.8 -m venv .pbuild
          . .pbuild/bin/activate

          # Ensure pip exists (venv should have it; bootstrap just in case)
          python -m pip --version || (curl -fsSL https://bootstrap.pypa.io/pip/3.8/get-pip.py -o get-pip.py && python get-pip.py)
          python -m pip install -U pip setuptools wheel

          # Speed-ups (ccache in workspace to avoid $HOME issues)
          mkdir -p .ccache
          export CCACHE_DIR="$PWD/.ccache"
          export CC="ccache gcc" CXX="ccache g++"
          export CFLAGS="-march=armv8-a" CXXFLAGS="
